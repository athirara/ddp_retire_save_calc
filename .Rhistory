sd(trainCapAveS)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
str(training[, 58])
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
set.seed(13343)
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)==1
training$capAve[selectNA] <- NA
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
install.packages('RANN')
library(RANN)
capAve <- predict(preObj,training[,-58])$capAve
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
quantile((capAve - capAveTruth)[selectNA])
quantile((capAve - capAveTruth)[!selectNA])
set.seed(13343)
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)==1
preObj <- preProcess(training[,-58],method="knnImpute")
library(RANN)
capAve <- predict(preObj,training[,-58])$capAve
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
set.seed(32343)
modelFit <- train(type ~.,data=training,
preProcess=c("center","scale"),method="glm")
modelFit
preObj <- preProcess(training[,-58],method=c("BoxCox"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
set.seed(13343)
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)==1
training$capAve[selectNA] <- NA
# Impute and standardize
# k nearest neighbor imputation
preObj <- preProcess(training[,-58],method="knnImpute")
# the following code requires RANN package
library(RANN)
capAve <- predict(preObj,training[,-58])$capAve
# Standardize true values
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
quantile((capAve - capAveTruth)[selectNA])
quantile((capAve - capAveTruth)[!selectNA])
library(kernlab);data(spam)
head(spam)
spam$capitalAveSq <- spam$capitalAve^2
library(ISLR); library(caret); data(Wage);
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass,data=training)
head(predict(dummies,newdata=training))
?dummyVars
library(splines)
bsBasis <- bs(training$age,df=3)
bsBasis
lm1 <- lm(wage ~ bsBasis,data=training)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
predict(bsBasis,age=testing$age)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
M <- abs(cor(training[,-58]))
?diag()
?which
M <- abs(cor(training[,-58]))
M <- abs(cor(training[,-58])) # correlation matrix
M
diag(M) <- 0 # replace the diagonal of a matrix
which(M > 0.8,arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
X <- 0.71*training$num415 + 0.71*training$num857
Y <- 0.71*training$num415 - 0.71*training$num857
plot(X,Y)
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
?prComp
?prcomp
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
rm(preProc)
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1)) # used PCA processed data to predict
plot(spamPC[,1],spamPC[,2],col=typeColor)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
warnings()
str(training)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
rm(preProc)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$type,predict(modelFit,testing))
library(caret);data(faithful); set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,
p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
predict(lm1,newdata)
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,predict(lm1),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testFaith)-testFaith$eruptions)^2))
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty = c(1,1,1), lwd=3)
ord
pred1
modFit <- train(eruptions ~ waiting,data=trainFaith,method="lm")
summary(modFit$finalModel)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=education,data=training)
modFit<- train(wage ~ age + jobclass + education,
method = "lm",data=training)
finMod <- modFit$finalModel
print(modFit)
str(wage)
str(Wage)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
dev.off()
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
?plot
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
plot(finMod$residuals,pch=19)
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
modFitAll<- train(wage ~ .,data=training,method="lm")
pred <- predict(modFitAll, testing)
qplot(wage,pred,data=testing)
warnings()
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
data(AlzheimerDisease)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
str(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
str(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
str(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength,pch=19)
str(training)
lapply(traning[, -c('CompressiveStrength')])
str(traning[, -c('CompressiveStrength')])
str(training[, -c('CompressiveStrength')])
str(training[, -'CompressiveStrength'])
lapply(traning[, -9], hist)
lapply(training[, -9], hist)
library(Hmisc)
l <- lapply(training[, -9], cut2, g = 4)
str(l)
lapply(training[, -9], table)
str(l)
str(training)
table(training$FlyAsh)
cutFlyAsh <- cut2(training$FlyAsh,g=4)
str(cutFlyAsh)
n <- names(training[, -9])
n
paste0("training$", n[1])
x <- paste0("training$", n[1])
x <- paste0("training$", n[1])
qplot(training$CompressiveStrength,colour=x,data=training)
plot(training$CompressiveStrength,colour=x,data=training)
warnings()
?qplot
qplot(rownames(training),training$CompressiveStrength,colour=x,data=training)
str(l)
l[[1]]
str(l[[1]])
str(l)
qplot(rownames(training),training$CompressiveStrength,colour=l[[1]],data=training)
plot(training$CompressiveStrength, rownames(training),pch=19)
plot(rownames(training),training$CompressiveStrength, pch=19)
rownames(training)
x <- paste0("training$", n)
x
plot(training$CompressiveStrength,col=x[1])
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
hist(training$SuperPlasticizer)
?hist
str(training$SuperPlasticizer)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
str(training)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
table(training$Superplasticizer)
hist(log10(training$Superplasticizer+1))
str(training$Superplasticizer)
str(log(training$Superplasticizer))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?grep
n <- names(training)[grepl("^IL")]
n <- names(training)[grepl("^IL", names(training))]
n
names(training)
str(training[ , n])
?preProcess
preProc <- preProcess(training[, n],method="pca")
preProc
preProc <- preProcess(training[, n],method="pca", thresh= 0.8)
preProc
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
n
trainIL <- train[ , c(n, 'diagnosis')]
trainIL <- training[ , c(n, 'diagnosis')]
str(trainIL)
preProc <- preProcess(trainIL,method="pca", thresh= 0.8)
trainPC <- predict(preProc, trainIL)
names(trainIL)
preProc <- preProcess(trainIL[, -13],method="pca", thresh= 0.8)
trainPC <- predict(preProc, trainIL[, -13])
modelFit <- train(trainIL$diagnosis ~ .,method="glm",data=trainPC)
names(testing)
testPC <- predict(preProc, testing[-1])) # using same PC calculated from training set
testPC <- predict(preProc, testing[-1]) # using same PC calculated from training set
testPC <- predict(preProc, testing[,-1]) # using same PC calculated from training set
testIL <- testing[ , c(n, 'diagnosis')]
names(testIL)
testPC <- predict(preProc, testIL[,-13]) # using same PC calculated from training set
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
modelFit_nPCA <- train(diagnosis ~.,data=trainIL, method="glm")
confusionMatrix(testIL$diagnosis,predict(modelFit_nPCA,testIL))
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
plot(training$CompressiveStrength,pch=19)
l <- lapply(training[, -9], cut2, g = 4)
plot(training$CompressiveStrength, col = l[[1]],pch=19)
i <- l[[1]]
plot(training$CompressiveStrength, col = i,pch=19)
lapply(l, Q2Plot)
Q2Plot <- function(i){
plot(training$CompressiveStrength, col = i,pch=19)
}
lapply(l, Q2Plot)
invest <- data.frame(age=0:110, stocks, bonds)
invest <- data.frame(age=0:110, stocks=NA, bonds=NA)
head(invest)
invest[age < 20, c('stocks', 'bonds')] <- c(100, 0)
invest['age' < 20, c('stocks', 'bonds')] <- c(100, 0)
head(invest, 25)
invest[invest$age < 20, c('stocks', 'bonds')] <- c(100, 0)
invest[invest$age < 20, c('stocks', 'bonds')] <- c(100, 0)
head(invest, 25)
invest[invest$age < 20, 'stocks'] <- 100
invest[invest$age < 20, 'bonds'] <- 0
head(invest, 25)
invest[invest$age >= 20 & invest$age < 25, 'stocks'] <- 80
invest[invest$age >= 20 & invest$age < 25, 'bonds'] <- 20
head(invest, 305)
head(invest, 30)
invest[invest$age >= 25 & invest$age < 30, 'stocks'] <- 75
invest[invest$age >= 25 & invest$age < 30, 'bonds'] <- 25
61+26+10.5+2.5
60.1+25.8+11.3+2.8
38.1+16.3+32+9.1+4.4
29.5+12.6++34.8+11.6+11.5
invest <- data.frame(age=0:110, us_stocks=NA, intl_stocks, us_bonds=NA, intl_bonds = NA, st_TIPS = NA)
invest[invest$age < 40, 'us_stocks'] <- 63
invest[invest$age < 40, 'intl_stocks'] <- 27
invest[invest$age < 40, 'us_bonds'] <- 8
invest[invest$age < 40, 'intl_bonds'] <- 2
invest[invest$age < 40, 'st_TIPS'] <- 0
invest[invest$age >= 40 & invest$age < 45, 'us_stocks'] <- 61
invest[invest$age >= 40 & invest$age < 45, 'intl_stocks'] <- 26
invest[invest$age >= 40 & invest$age < 45, 'us_bonds'] <- 10.5
invest[invest$age >= 40 & invest$age < 45, 'intl_bonds'] <- 2.5
invest[invest$age >= 40 & invest$age < 45, 'st_TIPS'] <- 0
invest[invest$age >= 45 & invest$age < 50, 'us_stocks'] <- 60.1
invest[invest$age >= 45 & invest$age < 50, 'intl_stocks'] <- 25.8
invest[invest$age >= 45 & invest$age < 50, 'us_bonds'] <- 11.3
invest[invest$age >= 45 & invest$age < 50, 'intl_bonds'] <- 2.8
invest[invest$age >= 45 & invest$age < 50, 'st_TIPS'] <- 0
invest[invest$age >= 50 & invest$age < 55, 'us_stocks'] <- 54.9
invest[invest$age >= 50 & invest$age < 55, 'intl_stocks'] <- 23.5
invest[invest$age >= 50 & invest$age < 55, 'us_bonds'] <- 17.3
invest[invest$age >= 50 & invest$age < 55, 'intl_bonds'] <- 4.3
invest[invest$age >= 50 & invest$age < 55, 'st_TIPS'] <- 0
invest[invest$age >= 55 & invest$age < 60, 'us_stocks'] <- 49.6
invest[invest$age >= 55 & invest$age < 60, 'intl_stocks'] <- 21.3
invest[invest$age >= 55 & invest$age < 60, 'us_bonds'] <- 23.3
invest[invest$age >= 55 & invest$age < 60, 'intl_bonds'] <- 5.8
invest[invest$age >= 55 & invest$age < 60, 'st_TIPS'] <- 0
invest[invest$age >= 60 & invest$age < 65, 'us_stocks'] <- 44.4
invest[invest$age >= 60 & invest$age < 65, 'intl_stocks'] <- 19.0
invest[invest$age >= 60 & invest$age < 65, 'us_bonds'] <- 29.3
invest[invest$age >= 60 & invest$age < 65, 'intl_bonds'] <- 7.3
invest[invest$age >= 60 & invest$age < 65, 'st_TIPS'] <- 0
invest[invest$age >= 65 & invest$age < 70, 'us_stocks'] <- 38.2
invest[invest$age >= 65 & invest$age < 70, 'intl_stocks'] <- 16.3
invest[invest$age >= 65 & invest$age < 70, 'us_bonds'] <- 32.0
invest[invest$age >= 65 & invest$age < 70, 'intl_bonds'] <- 9.1
invest[invest$age >= 65 & invest$age < 70, 'st_TIPS'] <- 4.4
invest[invest$age >= 70, 'us_stocks'] <- 29.5
invest[invest$age >= 70, 'intl_stocks'] <- 12.6
invest[invest$age >= 70, 'us_bonds'] <- 34.8
invest[invest$age >= 70, 'intl_bonds'] <- 11.6
invest[invest$age >= 70, 'st_TIPS'] <- 11.5
invest
rm(invest)
invest <- data.frame(age=0:110, us_stocks=NA, intl_stocks, us_bonds=NA, intl_bonds = NA, st_TIPS = NA)
invest[invest$age < 40, 'us_stocks'] <- 63
invest[invest$age < 40, 'intl_stocks'] <- 27
invest[invest$age < 40, 'us_bonds'] <- 8
invest[invest$age < 40, 'intl_bonds'] <- 2
invest[invest$age < 40, 'st_TIPS'] <- 0
invest[invest$age >= 40 & invest$age < 45, 'us_stocks'] <- 61
invest[invest$age >= 40 & invest$age < 45, 'intl_stocks'] <- 26
invest[invest$age >= 40 & invest$age < 45, 'us_bonds'] <- 10.5
invest[invest$age >= 40 & invest$age < 45, 'intl_bonds'] <- 2.5
invest[invest$age >= 40 & invest$age < 45, 'st_TIPS'] <- 0
invest[invest$age >= 45 & invest$age < 50, 'us_stocks'] <- 60.1
invest[invest$age >= 45 & invest$age < 50, 'intl_stocks'] <- 25.8
invest[invest$age >= 45 & invest$age < 50, 'us_bonds'] <- 11.3
invest[invest$age >= 45 & invest$age < 50, 'intl_bonds'] <- 2.8
invest[invest$age >= 45 & invest$age < 50, 'st_TIPS'] <- 0
invest[invest$age >= 50 & invest$age < 55, 'us_stocks'] <- 54.9
invest[invest$age >= 50 & invest$age < 55, 'intl_stocks'] <- 23.5
invest[invest$age >= 50 & invest$age < 55, 'us_bonds'] <- 17.3
invest[invest$age >= 50 & invest$age < 55, 'intl_bonds'] <- 4.3
invest[invest$age >= 50 & invest$age < 55, 'st_TIPS'] <- 0
invest[invest$age >= 55 & invest$age < 60, 'us_stocks'] <- 49.6
invest[invest$age >= 55 & invest$age < 60, 'intl_stocks'] <- 21.3
invest[invest$age >= 55 & invest$age < 60, 'us_bonds'] <- 23.3
invest[invest$age >= 55 & invest$age < 60, 'intl_bonds'] <- 5.8
invest[invest$age >= 55 & invest$age < 60, 'st_TIPS'] <- 0
invest[invest$age >= 60 & invest$age < 65, 'us_stocks'] <- 44.4
invest[invest$age >= 60 & invest$age < 65, 'intl_stocks'] <- 19.0
invest[invest$age >= 60 & invest$age < 65, 'us_bonds'] <- 29.3
invest[invest$age >= 60 & invest$age < 65, 'intl_bonds'] <- 7.3
invest[invest$age >= 60 & invest$age < 65, 'st_TIPS'] <- 0
invest[invest$age >= 65 & invest$age < 70, 'us_stocks'] <- 38.2
invest[invest$age >= 65 & invest$age < 70, 'intl_stocks'] <- 16.3
invest[invest$age >= 65 & invest$age < 70, 'us_bonds'] <- 32.0
invest[invest$age >= 65 & invest$age < 70, 'intl_bonds'] <- 9.1
invest[invest$age >= 65 & invest$age < 70, 'st_TIPS'] <- 4.4
invest[invest$age >= 70, 'us_stocks'] <- 29.5
invest[invest$age >= 70, 'intl_stocks'] <- 12.6
invest[invest$age >= 70, 'us_bonds'] <- 34.8
invest[invest$age >= 70, 'intl_bonds'] <- 11.6
invest[invest$age >= 70, 'st_TIPS'] <- 11.5
invest <- data.frame(age=0:110, us_stocks=NA, intl_stocks, us_bonds=NA, intl_bonds = NA, st_TIPS = NA)
invest <- data.frame(age=0:110, us_stocks=NA, intl_stocks=NA, us_bonds=NA, intl_bonds = NA, st_TIPS = NA)
invest[invest$age < 40, 'us_stocks'] <- 63
invest[invest$age < 40, 'intl_stocks'] <- 27
invest[invest$age < 40, 'us_bonds'] <- 8
invest[invest$age < 40, 'intl_bonds'] <- 2
invest[invest$age < 40, 'st_TIPS'] <- 0
invest[invest$age >= 40 & invest$age < 45, 'us_stocks'] <- 61
invest[invest$age >= 40 & invest$age < 45, 'intl_stocks'] <- 26
invest[invest$age >= 40 & invest$age < 45, 'us_bonds'] <- 10.5
invest[invest$age >= 40 & invest$age < 45, 'intl_bonds'] <- 2.5
invest[invest$age >= 40 & invest$age < 45, 'st_TIPS'] <- 0
invest[invest$age >= 45 & invest$age < 50, 'us_stocks'] <- 60.1
invest[invest$age >= 45 & invest$age < 50, 'intl_stocks'] <- 25.8
invest[invest$age >= 45 & invest$age < 50, 'us_bonds'] <- 11.3
invest[invest$age >= 45 & invest$age < 50, 'intl_bonds'] <- 2.8
invest[invest$age >= 45 & invest$age < 50, 'st_TIPS'] <- 0
invest[invest$age >= 50 & invest$age < 55, 'us_stocks'] <- 54.9
invest[invest$age >= 50 & invest$age < 55, 'intl_stocks'] <- 23.5
invest[invest$age >= 50 & invest$age < 55, 'us_bonds'] <- 17.3
invest[invest$age >= 50 & invest$age < 55, 'intl_bonds'] <- 4.3
invest[invest$age >= 50 & invest$age < 55, 'st_TIPS'] <- 0
invest[invest$age >= 55 & invest$age < 60, 'us_stocks'] <- 49.6
invest[invest$age >= 55 & invest$age < 60, 'intl_stocks'] <- 21.3
invest[invest$age >= 55 & invest$age < 60, 'us_bonds'] <- 23.3
invest[invest$age >= 55 & invest$age < 60, 'intl_bonds'] <- 5.8
invest[invest$age >= 55 & invest$age < 60, 'st_TIPS'] <- 0
invest[invest$age >= 60 & invest$age < 65, 'us_stocks'] <- 44.4
invest[invest$age >= 60 & invest$age < 65, 'intl_stocks'] <- 19.0
invest[invest$age >= 60 & invest$age < 65, 'us_bonds'] <- 29.3
invest[invest$age >= 60 & invest$age < 65, 'intl_bonds'] <- 7.3
invest[invest$age >= 60 & invest$age < 65, 'st_TIPS'] <- 0
invest[invest$age >= 65 & invest$age < 70, 'us_stocks'] <- 38.2
invest[invest$age >= 65 & invest$age < 70, 'intl_stocks'] <- 16.3
invest[invest$age >= 65 & invest$age < 70, 'us_bonds'] <- 32.0
invest[invest$age >= 65 & invest$age < 70, 'intl_bonds'] <- 9.1
invest[invest$age >= 65 & invest$age < 70, 'st_TIPS'] <- 4.4
invest[invest$age >= 70, 'us_stocks'] <- 29.5
invest[invest$age >= 70, 'intl_stocks'] <- 12.6
invest[invest$age >= 70, 'us_bonds'] <- 34.8
invest[invest$age >= 70, 'intl_bonds'] <- 11.6
invest[invest$age >= 70, 'st_TIPS'] <- 11.5
invest
?write.table
write.table(invest, 'invest_allocation.csv', sep =",")
getwd()
library(shiny)
setwd("~/Dropbox/data_science_coursera/ddp/project/retire_saving_calc")
setwd("C:/Users/hiuyan/Dropbox/data_science_coursera/ddp/project/retire_saving_calc")
runApp(display.mode='showcase')
runApp(display.mode='showcase')
?titlePanel
ls("package:shiny")
?absolutePanel
?fixedPanel
?fixedPanel
?fluidPage
?headerPanel
?titlePanel
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
?fluidRow
?p
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
?tags
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
